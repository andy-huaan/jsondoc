apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "eclipse-wtp"
apply plugin: "application"

def $BASE_NAME = 'doctoro2o-gateway'
def $VERSION = '1.0'

compileJava.options.encoding = 'UTF-8'
mainClassName = "com.breadenglish.Application"

startScripts {
    defaultJvmOpts = ['-server', '-Xmx4096m', '-Xms4096m', '-Xmn1024m']
    classpath = project.files($BASE_NAME + '-' + $VERSION + '.jar')
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\' + $BASE_NAME + '-' + $VERSION + '.jar', '%APP_HOME%\\conf;%APP_HOME%\\lib\\' + $BASE_NAME + '-' + $VERSION + '.jar')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/' + $BASE_NAME + '-' + $VERSION + '.jar', '$APP_HOME/conf:$APP_HOME/lib/' + $BASE_NAME + '-' + $VERSION + '.jar')
    }
}
applicationDistribution.from("src/main/production/") {
    into "conf"
}
compileJava {
    options.encoding = "UTF-8"
}

configurations {
    moreLibs
//    compile.exclude module: "spring-boot-starter-tomcat"
}

war {
    baseName = "ROOT"
    version = ""
    classpath("src/main/production")
    //from 'src/rootContent' // adds a file-set to the root of the archive
    //webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    //classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    // webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}
//processResources {
//    exclude "application.properties"
//    exclude "cmpp1.properties"
//    exclude "*.sql"
//    exclude "jdbc.properties"
//    exclude "logback.xml"
//}

dependencies {
    //spring
    compile('org.springframework.boot:spring-boot-starter-web')
//    compile('org.springframework.boot:spring-boot-starter-jetty')
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    //其他
    compile "mysql:mysql-connector-java:5.1.29"
    compile 'org.apache.commons:commons-lang3:3.3.2'
//    compile 'org.apache.poi:poi:3.11'
//    compile 'org.apache.poi:poi-ooxml:3.11'
//    compile 'org.apache.poi:poi-ooxml-schemas:3.11'
//    compile 'org.apache.poi:poi-scratchpad:3.11'
//    compile 'org.apache.poi:poi-excelant:3.11'
//    compile 'org.apache.poi:poi-examples:3.11'
//    compile 'xerces:xercesImpl:2.11.0'
    compile 'com.github.kevinsawicki:http-request:6.0'
    compile 'org.jasypt:jasypt-spring31:1.9.2'
//    compile 'xml-apis:xml-apis:1.4.01'
//    compile 'xerces:xmlParserAPIs:2.6.2'
//    compile 'xerces:xerces:2.4.0'
    compile 'joda-time:joda-time:2.8.2'

    testCompile(
            "org.springframework.boot:spring-boot-starter-test",
            "junit:junit"
    )

    //gateway
    compile("org.springframework.boot:spring-boot-starter-redis")
    compile 'commons-dbcp:commons-dbcp:1.4'
    compile 'org.apache.mina:mina-core:2.0.7'
    compile 'commons-httpclient:commons-httpclient:3.1'

    // JSON DOC
    compile("org.jsondoc:spring-boot-starter-jsondoc:1.2.10")
    compile("org.jsondoc:jsondoc-ui-webjar:1.2.10")
}

defaultTasks "copyResourceToStatic"

task copyResourceToStatic {
    copy {
        from("src/main/resources/templates") {
            exclude "**/*.html", "**/*.xml"
        }
        into "src/main/resources/static"
        exclude "**/*.bak"

        includeEmptyDirs = false
    }
}

task copyDevOverlays(type: Copy) {
    into("build/resources/main")
    from("src/main/production") {
        include "**/*"
    }
}

war.doLast {
    into("build/resources/main")
    from("src/main/production") {
        include "**/*"
    }
}

jar {
    baseName = $BASE_NAME
    manifest.attributes provider: ""
    version = $VERSION

    manifest {
        attributes(
                'Main-Class': "com.breadenglish.Application",
                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


configurations {
    jaxDoclet
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
        docFilesSubDirs = true
        excludeDocFilesSubDir '.svn'
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
    }
}

task generateRestApiDocs(type: Javadoc) {
    options.encoding = "UTF-8"
    source = sourceSets.main.allJava
    destinationDir = reporting.file("rest-api-docs")
    options.docletpath = configurations.jaxDoclet.files.asType(List)
    options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
    options.addStringOption("jaxrscontext", "http://localhost:8080/myapp")
}